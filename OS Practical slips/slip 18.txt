/LRU 

#include<stdio.h>

int pf=0,pg;
int f,frame[5],ref[50],victim=0,time[50];

int searchpage(int p)
{
	int i;
	for(i=0;i<f;i++)
	if(frame[i]==p)
	return i;
	return -1;
}

int selectvictim()
{
	int min=0,i;
	for(i=1;i<f;i++)
	{
		if(time[i]<time[min])
		min=i;
	}
	return min;
}

main()
{
	int i;
	printf("\nEnter the no.of frames : ");
	scanf("%d",&f);
	for(i=0;i<f;i++)
	frame[i]=-1;
	for(i=0;i<f;i++)
	time[i]=-1;

	printf("\nEnter the no. of pages : ");
	scanf("%d",&pg);

	printf("\nEnter the page(reference string) : ");
	for(i=0;i<pg;i++)
	scanf("%d",&ref[i]);

	for(i=0;i<pg;i++)
	{
		int k,j;
		k=searchpage(ref[i]);
		if(k==-1)
		{
			pf++;
			k=selectvictim();
			frame[k]=ref[i];
		}
		time[k]=i;
		printf("\n pg=%d |",ref[i]);
		for(j=0;j<f;j++)
		printf("\t%d",frame[j]);
	}
	printf("\nPage Fault is = %d",pf);
}












#include<stdio.h> 
void findWaitingTime(int processes[], int n,  
int bt[], int wt[])  
{  
wt[0] = 0;  
int i;  
for (i = 1; i < n ; i++ ){  
wt[i] = bt[i-1] + wt[i-1] ;  
}  
}  
void findTurnAroundTime( int processes[], int n,  
int bt[], int wt[], int tat[])  
{  
int i;  
for ( i = 0; i < n ; i++)  
tat[i] = bt[i] + wt[i];  
}  
void findavgTime( int processes[], int n, int bt[])  
{  
int wt[n], tat[n], total_wt = 0, total_tat = 0;  
findWaitingTime(processes, n, bt, wt);  
findTurnAroundTime(processes, n, bt, wt, tat);  
printf("Processes Burst time Waiting time Turn around time\n");  
int i;  
for ( i=0; i<n; i++)  
{  
total_wt = total_wt + wt[i];  
total_tat = total_tat + tat[i];  
printf(" %d ",(i+1));  
printf(" %d ", bt[i] );
printf(" %d",wt[i] );  
printf(" %d\n",tat[i] );  
}  
int s=(float)total_wt / (float)n;  
int t=(float)total_tat / (float)n;  
printf("Average waiting time = %d",s);  
printf("\n");  
printf("Average turn around time = %d ",t);  
}  
int main()  
{  
int processes[] = { 1, 2, 3};  
int n = sizeof processes / sizeof processes[0];  
int burst_time[] = {10, 5, 8};  
findavgTime(processes, n, burst_time);  
return 0;  
}
