//Typeline (shell)

#include<stdio.h>
#include<unistd.h>
#include<string.h>
#include<stdlib.h>

void typeline(char *op,char *fname)
{
	char ch,str[20];
	FILE *fp;
	int lc=0,skip,count=0;
	fp=fopen(fname,"r");
	if(fp==NULL)
		printf("file does not exist\n");
	
	else
		printf("file exist\n");

	if(strcmp(op,"a")==0)
	{
		while(!feof(fp))
		{
			ch=fgetc(fp);
			printf("%c",ch);
		}
	}

	else
	{
		int n=atoi(op);// convert string to integer
		if(n>0)
		{
			while(lc<n)   //0<3
			{
				ch=fgetc(fp);
				if(ch=='\n')
				lc++;
				printf("%c",ch);
			}
		}

		if(n<0)
{
  while(!feof(fp))
  {
    ch=fgetc(fp);//obtain input from a file single character at time
    if(ch=='\n')
lc++;
}
   skip=lc+n;//s=10+-2=8
   fseek(fp,0,SEEK_SET);//move file pointer associated with a given file a specific position
   while(fgets(str,80,fp)!=NULL)//read line from specific stream
{
 count++;
  if(count<=skip)
   {
    } 
else
    printf("%s",str);
}
}
		
	}
}

int main(int argc,char *argv[])
{
	char tok1[20],tok2[20],tok3[20],tok4[20],fname[30];
	int choice,f;
	char cmd[40] ;
	while(1)
	{
		printf("\nMyshell $:") ;
		gets(cmd);
		if(strcmp(cmd,"exit")==0)
		exit(0);
		int choice=sscanf(cmd,"%s%s%s%s",&tok1,&tok2,&tok3,&tok4);
		if (choice==3)
		{
			if(strcmp(tok1,"typeline")==0)
			typeline(tok2,tok3);
			continue;
		}
		if(fork()==0)  
		{
			switch(choice)
			{
					  case 1:
						  execlp(tok1,NULL);
						  break; 
					  case 2:
						  execlp(tok1,tok2,NULL) ;
						  break; 
					  case 3:
						  execlp(tok1,tok2,tok3,NULL) ;
						  break; 
					  case 4:
						  execlp(tok1,tok2,tok3,tok4,NULL) ;
						  break; 
			}//switch
			exit(0);
		}//if
	}//while   
}//main








/*RR Scheduling*/

#include<stdio.h> 
#include<stdlib.h>
     
int main() 
{ 
  int i, limit, total = 0, x, counter = 0, time_quantum; 
  int wait_time = 0, turnaround_time = 0, arrival_time[10], burst_time[10], temp[10]; 
  float average_wait_time, average_turnaround_time;
  printf("\nEnter Total Number of Processes:\t"); 
  scanf("%d", &limit); 
  x = limit; 
  
      for(i = 0; i < limit; i++) 
      {
            printf("\nEnter Details of Process[%d]\n", i + 1);
            printf("Arrival Time:\t");
            scanf("%d", &arrival_time[i]);
            printf("Burst Time:\t");
            scanf("%d", &burst_time[i]); 
            temp[i] = burst_time[i];
      } 
      
      printf("\nEnter Time Quantum:\t"); 
      scanf("%d", &time_quantum); 
      
      printf("\nProcess ID\t\tBurst Time\t Turnaround Time\t Waiting Time\n");
      for(total = 0, i = 0; x != 0;) 
      { 
            if(temp[i] <= time_quantum && temp[i] > 0) 
            { 
                  total = total + temp[i]; 
                  temp[i] = 0; 
                  counter = 1; 
            } 
            else if(temp[i] > 0) 
            { 
                  temp[i] = temp[i] - time_quantum; 
                  total = total + time_quantum; 
            } 
            if(temp[i] == 0 && counter == 1) 
            { 
                  x--; 
                  printf("\nProcess[%d]\t\t%d\t\t %d\t\t\t %d", i + 1, burst_time[i], total - arrival_time[i], total - arrival_time[i] - burst_time[i]);
                  wait_time = wait_time + total - arrival_time[i] - burst_time[i]; 
                  turnaround_time = turnaround_time + total - arrival_time[i]; 
                  counter = 0; 
            } 
            if(i == limit - 1) 
            {
                  i = 0; 
            }
            else if(arrival_time[i + 1] <= total) 
            {
                  i++;
            }
            else 
            {
                  i = 0;
            }
      } 
      
	average_wait_time = wait_time * 1.0 / limit;
	average_turnaround_time = turnaround_time * 1.0 / limit;
	printf("\n\nAverage Waiting Time:\t%f", average_wait_time); 
	printf("\nAvg Turnaround Time:\t%f\n", average_turnaround_time); 
	return 0; 
}		