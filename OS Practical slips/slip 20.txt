//Typeline (shell)

#include<stdio.h>
#include<unistd.h>
#include<string.h>
#include<stdlib.h>

void typeline(char *op,char *fname)
{
	char ch,str[20];
	FILE *fp;
	int lc=0,skip,count=0;
	fp=fopen(fname,"r");
	if(fp==NULL)
		printf("file does not exist\n");
	
	else
		printf("file exist\n");

	if(strcmp(op,"a")==0)
	{
		while(!feof(fp))
		{
			ch=fgetc(fp);
			printf("%c",ch);
		}
	}

	else
	{
		int n=atoi(op);// convert string to integer
		if(n>0)
		{
			while(lc<n)   //0<3
			{
				ch=fgetc(fp);
				if(ch=='\n')
				lc++;
				printf("%c",ch);
			}
		}

		if(n<0)
{
  while(!feof(fp))
  {
    ch=fgetc(fp);//obtain input from a file single character at time
    if(ch=='\n')
lc++;
}
   skip=lc+n;//s=10+-2=8
   fseek(fp,0,SEEK_SET);//move file pointer associated with a given file a specific position
   while(fgets(str,80,fp)!=NULL)//read line from specific stream
{
 count++;
  if(count<=skip)
   {
    } 
else
    printf("%s",str);
}
}
		
	}
}

int main(int argc,char *argv[])
{
	char tok1[20],tok2[20],tok3[20],tok4[20],fname[30];
	int choice,f;
	char cmd[40] ;
	while(1)
	{
		printf("\nMyshell $:") ;
		gets(cmd);
		if(strcmp(cmd,"exit")==0)
		exit(0);
		int choice=sscanf(cmd,"%s%s%s%s",&tok1,&tok2,&tok3,&tok4);
		if (choice==3)
		{
			if(strcmp(tok1,"typeline")==0)
			typeline(tok2,tok3);
			continue;
		}
		if(fork()==0)  
		{
			switch(choice)
			{
					  case 1:
						  execlp(tok1,NULL);
						  break; 
					  case 2:
						  execlp(tok1,tok2,NULL) ;
						  break; 
					  case 3:
						  execlp(tok1,tok2,tok3,NULL) ;
						  break; 
					  case 4:
						  execlp(tok1,tok2,tok3,tok4,NULL) ;
						  break; 
			}//switch
			exit(0);
		}//if
	}//while   
}//main
   













// NON-Premptive SJF

#include<stdio.h>
#include<stdlib.h>

struct job{
	int atime; //arraival time.
	int btime; //brust time.
	int ft; //finish time.
	int tat; //Trun around time.
	int wt; // waiting time.
}p[10];

int arr[10],brust[10],n,rq[10],no_rq=0,time=0;

void main(){
	
	int i,j;
	printf("Enter the job number:");
	scanf("%d",&n);
	printf("\n");
	
	for(i = 0;i<n;i++){
		printf("Enter the arrival time p%d:",i);
		scanf("%d",&p[i].atime); //Assigning the arrival time.
		arr[i] = p[i].atime;
	}
	printf("\n");
	
	for(i = 0;i<n;i++){
	printf("Enter the arrival time p%d:",i);
	printf("%d\n",p[i].atime); //Printing the arrival time.
	arr[i] = p[i].atime;
	}
	printf("\n");
	
	for(i = 0;i<n;i++){
	printf("Enter the brust time p%d:",i);
	scanf("%d",&p[i].btime); //Assigning the brust time.
	brust[i] = p[i].btime;
	}
	printf("\n");
	
	for(i = 0;i<n;i++){
	printf("Enter the brust time p%d:",i);
	printf("%d\n",p[i].btime); //Printing the brust time.
	brust[i] = p[i].btime;
	}
	printf("\n");
	
	addrq();  //Adding the process.
	// Process start now.
	printf("Gnatt Chart is:");
	while(1){
	j = selectionjob(); //sercah the process now.
		
		if(j == -1){
			printf("CPU is ideal");
			time++;
			addrq();			
		}else{
			while(brust[j]!=0){
				printf("\t j %d",j);
				brust[j]--;
				time++;
				addrq();
			}
			p[j].ft = time;
		}
		if(fsahll() == 1)
		break;
	}
	int Tat = 0,Twt =0;
	
	printf("\n");
	printf("\nJob \t FT \t TAT \t WT");
	for(i=0;i<n;i++){
		p[i].tat = p[i].ft-p[i].atime;
		p[i].wt = p[i].tat-p[i].btime;
		
		printf("\n JOb %d \t %d \t %d \t %d",i,p[i].ft,p[i].tat,p[i].wt);
		Tat += p[i].tat;
		Twt += p[i].wt;
	}
	
	float avgtat = Tat /n;
	float avgwt = Twt /n;
	
	printf("\nAverage of trun around time is:%f",avgtat);
	printf("\nAverage of wait time is:%f",avgwt);
}

int addrq(){
	int i;
	for(i=0;i<n;i++){
		if(arr[i] == time){
			rq[no_rq] = i;
			no_rq++;
		}
	}
}

int selectionjob(){
	int i,j;
	if(no_rq == 0)
		return 1;
		j = rq[0];
		
		for(i=1;i<no_rq;i++)
		if(brust[j]>brust[rq[i]])
		j = rq[i];
		
		deleteq(j);
		return j;
}

int deleteq(int j){
	int i;
	for(i=0;i<no_rq;i++)
		
		if(rq[i] == j)
			break;
		
		for(i= i+1;i<no_rq;i++)
		rq[i-1] = rq[i];
		no_rq--;
}

int fsahll(){
	int i;
	for(i=0;i<n;i++)
	if(brust[i]!=0)
	return -1;
	return 1; 
}
